Stat41=rnorm(100,mean=10,sd=0.5),
Stat12=rnorm(100,mean=4,sd=2),
Stat22=rnorm(100,mean=4.5,sd=2),
Stat32=rnorm(100,mean=7,sd=0.5),
Stat42=rnorm(100,mean=8,sd=3),
Stat13=rnorm(100,mean=6,sd=0.5),
Stat23=rnorm(100,mean=5,sd=3),
Stat33=rnorm(100,mean=8,sd=0.2),
Stat43=rnorm(100,mean=4,sd=4))
View(data)
boxplot(data)
boxplot(data, las = 2)
boxplot(data, las = 2,names = c('Station 1','Station 2','Station 3',
'Station 4','Station 1','Station 2',
'Station 3','Station 4','Station 1',
'Station 2','Station 3','Station 4'))
boxplot(data, las = 2,at =c(1,2,3,4, 6,7,8,9, 11,12,13,14),
names = c('Station 1','Station 2','Station 3',
'Station 4','Station 1','Station 2',
'Station 3','Station 4','Station 1',
'Station 2','Station 3','Station 4'))
boxplot(data, las = 2,at =c(1,2,3,4,6,7,8,9,11,12,13,14),
names = c('Station 1','Station 2','Station 3',
'Station 4','Station 1','Station 2',
'Station 3','Station 4','Station 1',
'Station 2','Station 3','Station 4'))
x = data.frame(c1 = 1:2, c2=10:11)
x
area_circulo=function(r){
return (pi*r^2)
}
sapply(x[,'c1'],area_circulo)
sapply(x['c1'],area_circulo)
sapply(x[1],area_circulo)
sapply(x[,1],area_circulo)
area_circulo=function(r,pi){
return (pi*r^2)
}
sapply(x[,1],area_circulo,3.14)
apply(x[,1],area_circulo,3.14)
apply(x[,1],1,area_circulo,3.14)
apply(x,1,area_circulo,3.14)
sapply(x,area_circulo,3.14)
sapply(x[,1],area_circulo,3.14)
sapply(x[1],area_circulo,3.14)
sapply(x[,'c1'],area_circulo)    ##la , permite elegir en que dimensión retorna
area_circulo=function(r){
return (pi*r^2)
}
sapply(x[,'c1'],area_circulo)    ##la , permite elegir en que dimensión retorna
sapply(x[,'c1'],area_circulo)    ##la , permite elegir en que dimensión retorna
x = data.frame(c1 = 1:5, c2=10:14)
x
rowSums(x)
rowMeans(x)
colSums(x)
colMeans(x)
data = read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data',
header = T,stringsAsFactors = F,
colClasses = c('numeric','numeric','character',
'character','character','character',
'character','character','numeric'))
data = read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura.csv',
header = T,stringsAsFactors = F,
colClasses = c('numeric','numeric','character',
'character','character','character',
'character','character','numeric'))
data = read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura.csv',
header = T,stringsAsFactors = F,
colClasses = c('numeric','character','character',
'character','character','character',
'character','character','numeric'))
data = read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura.csv',
header = T,stringsAsFactors = F,
colClasses = c('numeric','character','character',
'character','character','character',
'character','character','character'))
View(data)
write.csv(data,'/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura2.csv',row.names = F)
write.csv(data,'/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura2.csv',row.names = T)
str(data)
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón')
library(datasets)
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón')
library(datasets)
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón')
hist(mtcars$mpg,col = 'green', main = 'Distribución de millas por galón')
autos=mtcars
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón')
View(autos)
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón',
xlab = 'Millas por galón',ylab = 'Frecuencia')
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón',
xlab = 'Millas por galón',ylab = 'Frecuencia',breaks = 3)
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón',
xlab = 'Millas por galón',ylab = 'Frecuencia',breaks = 10)
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón',
xlab = 'Millas por galón',ylab = 'Frecuencia',breaks = 7)
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón',
xlab = 'Millas por galón',ylab = 'Frecuencia',breaks = 5)
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón',
xlab = 'Millas por galón',ylab = 'Frecuencia')
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón',
xlab = 'Millas por galón',ylab = 'Frecuencia',breaks = 1)
hist(autos$mpg,col = 'green', main = 'Distribución de millas por galón',
xlab = 'Millas por galón',ylab = 'Frecuencia',breaks = 2)
hist(autos$hp,col = 'blue', main = 'Distribución de horse power',
xlab = 'Horse Power',ylab = 'Frecuencia')
hist(autos$hp,col = 'lightgreen', main = 'Distribución de horse power',
xlab = 'Horse Power',ylab = 'Frecuencia')
boxplot(autos$hp)
boxplot(autos$mpg)
boxplot(autos$hp)
boxplot(autos$hp,col = 'lightred', main = 'Distribución de horse power',
ylab = 'Horse power')
boxplot(autos$hp,col = 'lightgreen', main = 'Distribución de horse power',
ylab = 'Horse power')
barplot(table(autos$am),col = 'lightgreen', main = 'Nro. de vehículos por tipo de transmisión',
xlab = 'Tipo de Transmisión')
barplot(table(autos$am),col = 'lightgreen', main = 'Nro. de vehículos por tipo de transmisión',
xlab = 'Tipo de Transmisión')
barplot(table(autos$am,dnn = c('automatico','manual')),col = 'lightgreen', main = 'Nro. de vehículos por tipo de transmisión',
xlab = 'Tipo de Transmisión')
barplot(table(autos$am),col = 'lightgreen', main = 'Nro. de vehículos por tipo de transmisión',
xlab = 'Tipo de Transmisión')
plot(presidents)
plot(presidents, ylab = 'Porcentaje de aprobación (%)', xlab='Año',
main='Aprobación (primer cuatrimestre) Presidentes de Estados Unidos')
plot(presidents, ylab = 'Porcentaje de aprobación (%)', xlab='Año',
main='Aprobación (primer cuatrimestre) Presidentes de EEUU')
plot(autos$mpg, autos$wt)
plot(autos$mpg, autos$wt, col = 'blue', main = 'Relación entre peso del vehículo y millas recorridas por galón',
xlab = 'Millas por galón', ylab = 'Peso (libras)')
plot(autos$mpg, autos$wt, col = 'blue', main = 'Relación entre peso y millas por galón',
xlab = 'Millas por galón', ylab = 'Peso (libras)')
data[1:2,'Pais']
data[1:3,'Pais']
data$pais[1:3]
data$pais
data$Pais
data$Pais[1:3]
x=data.frame(var1=sample(1:3),var2=sample(6:8),var3=sample(11:13))
x
x[,1]
x[,1]
x[(x$var1 >= 2 | x$var1 <=12),1]
x[(x$var1 >= 2 | x$var1 <=12),]
x[(x$var1 >= 2 & x$var1 <12),]
x[(x$var1 >= 2 & x$var1 < 12),]
x[x$var1 >= 2 & x$var1 < 12,]
x[x$var1 >= 2 & x$var3 < 12,]
x[x$var1 >= 2 | x$var3 < 12,]
x
sort(x$var1, decreasing = T)
sort(x, decreasing = T)
sort(x[1:3], decreasing = T)
sort(x[,1:3], decreasing = T)
sort(x[,1], decreasing = T)
sort(x$var1, decreasing = T)
becal=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal2017.csv',
header = T,stringsAsFactors = F)
View(becal)
becal[1:5,becal$Sexo]
becal[1:5,'Sexo']
tolower(becal[,'Sexo'])[1:5]
tolower(becal[,'Sexo'])
tolower(becal[,'Sexo'])[1:5]
toupper(becal[,'Sexo'])[1:5]
toupper(becal[,'Sexo'])
tolower(becal[1:5,'Sexo'])
tolower(becal[,'Sexo'])[1:5]
toupper(becal[,'Sexo'])
becal[,'Sexo'] = toupper(becal[,'Sexo'])
becal$Sexo = tolower(becal[,'Sexo'])
## string functions
strsplit(becal[1:2,'Fecha.firma.de.Contrato'], '/')
becal=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal2017.csv',
header = T,stringsAsFactors = F)
## string functions
strsplit(becal[1:2,'Fecha.firma.de.Contrato'], '/')
fecha = strsplit(becal[1:2,'Fecha.firma.de.Contrato'], '/')
fecha[1]
fecha = strsplit(becal[1:2,'Fecha.firma.de.Contrato'], '/')
fecha[[1]
fecha = strsplit(becal[1:2,'Fecha.firma.de.Contrato'], '/')
fecha[[1]]
fecha[1]
fecha[1,1]
fecha[1]
fecha[1,]
fecha[[1,1]]
fecha[[1]]
fecha[[1,]]
fecha[[2]]
fecha[[1]]
fecha[[[1]]]
fecha[[1]]
gsub(',', '', becal[,'C.I.'])[1:2]
gsub(' ','',gsub(',', '', becal[,'C.I.']))[1:2]
fecha[[1]]
gsub(' ','',gsub(',', '', becal[,'C.I.']))[1:2]
becal_c=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura.csv',
header = T,stringsAsFactors = F)
View(becal_c)
grep('€',becal_c[c(1,210,843),'Total.General'])
grepl('€',becal_c[c(1,210,843),'Total.General'])
grep('€ ',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('€.',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('€o',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('.',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('€',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('[0-9]+',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('€.*[0-9]+',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grepl('€',becal_c[c(1,210,843),'Total.General'])  #regex, vector, retorna booleanos por fila con coincidencia o no
grepl('€.*[0-9]+',becal_c[c(1,210,843),'Total.General'])  #regex, vector, retorna booleanos por fila con coincidencia o no
grep('^€.*[0-9]+',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('$€.*[0-9]+',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('€.*[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('^€.*[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('^€[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('^€.[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('^€.*[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grepl('€',becal_c[c(1,210,843),'Total.General'])  #regex, vector, retorna booleanos por fila con coincidencia o no
grep('^€.*[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('^€.*[0-9]+$',becal_c[,'Total.General'])   #regex, vector, retorna filas con coincidencias
str_trim(becal[1:2,'Condición'])
library(stringr)
install.packages("stringr")
library(stringr)
str_trim(becal[1:2,'Condición'])
str_trim(becal[1:2,'Condición'])
nchar(becal_c[1,'Universidad.de.Destino'])
nchar(becal[1:2,'Condición'])
str_trim(becal[1:2,'Condición'])
substr(becal_c[1,'Universidad.de.Destino'],16,20)
becal_c[1,c(5,6)]
becal_c[1,c(5,5)]
becal_c[1,c(5)]
becal_c[1,c(5,6)]
paste0(becal_c[1,5],' (',becal_c[1,6],')')
str_trim(becal[1:2,'Condición'])
substr(becal_c[1,'Universidad.de.Destino'],16,20)
nchar(becal_c[1,'Universidad.de.Destino'])
substr(becal_c[1,'Universidad.de.Destino'],16,20)
becal_c[1,c(5,6)]
paste0(becal_c[1,5],' (',becal_c[1,6],')')
gsub(',', '', becal[,'C.I.'])[1:2]
str_trim(gsub(',', '', becal[,'C.I.']))[1:2]
str_trim(gsub(',', '', becal[,'C.I.']))
## merge datasets
becal[,'C.I.'] = str_trim(gsub(',', '', becal[,'C.I.']))
str_trim(gsub(',', '', becal_c[,'C.I.']))
str_trim(gsub('.', '', becal_c[,'C.I.']))
str_trim(gsub('.', '', becal_c[,'C.I.']))
str_trim(gsub('\.', '', becal_c[,'C.I.']))
str_trim(gsub('\\.', '', becal_c[,'C.I.']))
becal_c[,'C.I.'] = str_trim(gsub('\\.', '', becal_c[,'C.I.']))
ambos_becal = merge(becal, becal_c, by.x="C.I.", by.y="C.I.", all.y=TRUE)
View(ambos_becal)
head(select(becal, C.I., Sexo, Edad))
install.packages("dplyr")
## dplyr: Split-Apply-Combine Paradigm
library(dplyr)
head(select(becal, C.I., Sexo, Edad))
head(select(ambos_becal, C.I., Sexo, Edad))
head(select(becal, C.I., Sexo, Edad))
dataset_filtrado = filter(becal, Sexo=='Femenino')
dataset_filtrado = filter(becal, Sexo=='Femenino')
gsub(' ', '', becal[,'Sexo'])
dataset_filtrado = filter(gsub(' ', '', becal[,'Sexo']), Sexo=='Femenino')
dataset_filtrado = filter(becal, Sexo=='Femenino')
str_trim(becal[,'Sexo'])
becal[,'Sexo'] = str_trim(becal[,'Sexo'])
dataset_filtrado = filter(becal, Sexo=='Femenino')
dataset_filtrado = filter(becal, Sexo='Femenino')
dataset_filtrado = filter(becal, Sexo=='Femenino')
becal[,'Sexo'] = str_trim(becal[,'Sexo'])
dataset_filtrado = filter(becal, Sexo=='Femenino')
dataset_filtrado = filter(becal, Sexo=='Femenino')
dataset_filtrado
head(dataset_filtrado)
head(select(dataset_filtrado, C.I., Sexo, Edad))
dataset_ordenado = arrange(becal, Edad)
head(select(dataset_ordenado, C.I., Sexo, Edad))
dataset_ordenado_desc = arrange(becal, desc(Edad))
head(select(dataset_ordenado_desc, C.I., Sexo, Edad))
dataset_ordenado = arrange(ambos_becal, Edad)
head(select(dataset_ordenado, C.I., Sexo, Edad))
dataset_ordenado_desc = arrange(ambos_becal, desc(Edad))
head(select(dataset_ordenado_desc, C.I., Sexo, Edad))
becal_renombrado = rename(becal, ci = C.I., sexo = Sexo, edad = Edad)
View(becal_renombrado)
select(becal, C.I., Sexo, Edad)
head(select(becal, C.I., Sexo, Edad))
filter(becal, Sexo=='Femenino')
head(select(dataset_filtrado, C.I., Sexo, Edad))
head(select(becal, C.I., Sexo, Edad))
head(select(dataset_filtrado, C.I., Sexo, Edad))
head(select(dataset_ordenado, C.I., Sexo, Edad))
head(select(dataset_ordenado_desc, C.I., Sexo, Edad))
View(dataset_filtrado)
dataset_filtrado = filter(ambos_becal, Sexo=='Femenino')
head(select(dataset_filtrado, C.I., Sexo, Edad))
View(dataset_filtrado)
mutate(becal_c, total_gs=5500*convertir_totalgeneral(Total.General))
head(select(becal_gs, Total.General, total_gs), 5)
substr(becal_c[,'Total.General'],2)
substr(becal_c[,'Total.General'],2,str_length(becal_c[,'Total.General']))
str_trim(substr(becal_c[,'Total.General'],2,str_length(becal_c[,'Total.General'])))
becal=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal2017.csv',
header = T,stringsAsFactors = F)
becal_c=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura.csv',
header = T,stringsAsFactors = F)
becal[,'C.I.'] = str_trim(gsub(',', '', becal[,'C.I.']))
becal_c[,'C.I.'] = str_trim(gsub('\\.', '', becal_c[,'C.I.']))
library(stringr)
becal[,'C.I.'] = str_trim(gsub(',', '', becal[,'C.I.']))
becal_c[,'C.I.'] = str_trim(gsub('\\.', '', becal_c[,'C.I.']))
ambos_becal = merge(becal, becal_c, by.x="C.I.", by.y="C.I.", all.y=TRUE)
hist(ambos_becal$edad, main=paste("Distribución de becarios por edad (n=",nrow(becal_m),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
View(ambos_becal)
View(ambos_becal)
hist(ambos_becal$Edad, main=paste("Distribución de becarios por edad (n=",nrow(becal_m),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(ambos_becal$as.numeric(Edad), main=paste("Distribución de becarios por edad (n=",nrow(becal_m),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(becal_m),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 80))
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 80))
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 50))
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 60))
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 50))
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 60))
summary(as.numeric(ambos_becal$Edad))
boxplot(as.numeric(ambos_becal$Edad))
quantile(as.numeric(ambos_becal$Edad))
quantile(as.numeric(ambos_becal$Edad), na.rm = T)
quantile(as.numeric(ambos_becal$Edad), na.rm = T, probs = c(0.40,0.65,0.90))
ambos_becal$Edad = as.numeric(ambos_becal$Edad)
hist(ambos_becal$Edad, main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(ambos_becal$Edad, main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 60))
summary(ambos_becal$Edad)
quantile(ambos_becal$Edad, na.rm = T)
boxplot(as.numeric(ambos_becal$Edad))
boxplot(ambos_becal$Edad)
var(ambos_becal$Edad)
sd(ambos_becal$Edad)
var(ambos_becal$Edad, na.rm = T)
sd(ambos_becal$Edad, na.rm = T)
IQR(ambos_becal$Edad, na.rm = T)
mad(ambos_becal$Edad, na.rm = T) ## median absolute desviation
table(ambos_becal$Condición)
table(ambos_becal$Ciudad.de.Origen)
table(ambos_becal$Sexo)
table(ambos_becal$Condición)
barplot(table(ambos_becal$Condición),
main=paste("Becarios por condición (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de condición", col="blue")
barplot(table(ambos_becal$Ciudad.de.Origen),
main=paste("Becarios por condición (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de condición", col="blue")
barplot(table(ambos_becal$Sexo),
main=paste("Becarios por condición (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de condición", col="blue")
barplot(table(ambos_becal$Condición),
main=paste("Becarios por condición (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de condición", col="blue")
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por condición (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de condición", col="blue")
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue")
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue",las=2)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=1)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=2)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=3)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=3)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=4)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=3)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=2)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", col="blue", las=2)
table(ambos_becal$País.de.Destino) ## resumen para variables categóricas
subset(ambos_becal, País.de.Destino != "ESPAÑA")
table (subset(ambos_becal, País.de.Destino != "ESPAÑA")$País.de.Destino)
table(ambos_becal$País.de.Destino) ## resumen para variables categóricas
table(subset(ambos_becal, País.de.Destino != "")$País.de.Destino)
trim(ambos_becal$País.de.Destino)
str_trim(ambos_becal$País.de.Destino)
ambos_becal$País.de.Destino = str_trim(ambos_becal$País.de.Destino)
table(subset(ambos_becal, País.de.Destino != "")$País.de.Destino)
table(subset(ambos_becal, País.de.Destino != "")$País.de.Destino)
ambos_becal_limpio = table(subset(ambos_becal, País.de.Destino != "")$País.de.Destino)
pais_destino_categorias = table(droplevels(becal_limpio$País.de.Destino))
becal_limpio = table(subset(ambos_becal, País.de.Destino != "")$País.de.Destino)
pais_destino_categorias = table(droplevels(becal_limpio$País.de.Destino))
becal_limpio = subset(ambos_becal, País.de.Destino != "")
pais_destino_categorias = table(droplevels(becal_limpio$País.de.Destino))
View(becal_limpio)
droplevels(becal_limpio$País.de.Destino)
factor(becal_limpio$País.de.Destino)
pais_destino_categorias = table(droplevels(factor(becal_limpio$País.de.Destino)))
categoria_ordenadas = sort(pais_destino_categorias, decreasing = T)  # ordena las categorias de mayor a menor
barplot(categoria_ordenadas, main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", col="blue", las=2)
ambos_becal$País.de.Destino = factor(str_trim(ambos_becal$País.de.Destino))
becal_limpio = subset(ambos_becal, País.de.Destino != "")
pais_destino_categorias = table(droplevels(becal_limpio$País.de.Destino))
categoria_ordenadas = sort(pais_destino_categorias, decreasing = T)  # ordena las categorias de mayor a menor
barplot(categoria_ordenadas, main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", col="blue", las=2)
plot(ambos_becal$Meses.de.duración.de.estudios, ambos_becal$Edad,
ylab="Edad", xlab="Duración Estudio en Meses",
main="Meses de Duración por Edad")
plot(ambos_becal$Meses.de.duración.de.estudios, ambos_becal$Edad,
ylab="Edad", xlab="Duración Estudio en Meses",
main="Meses de Duración por Edad", na.rm=T)
plot(ambos_becal$Meses.de.duración.de.estudios, ambos_becal$Edad,
ylab="Edad", xlab="Duración Estudio en Meses",
main="Meses de Duración por Edad")
groupo_meses = group_by(ambos_becal, Meses.de.duración.de.estudios)
library(dplyr)
groupo_meses = group_by(ambos_becal, Meses.de.duración.de.estudios)
View(groupo_meses)
edad_x_gm = summarize(groupo_meses, edad_mean = mean(ambos_becal$Edad))
View(edad_x_gm)
mean(ambos_becal$Edad)
mean(ambos_becal$Edad,na.rm = T)
edad_x_gm = summarize(groupo_meses, edad_mean = mean(ambos_becal$Edad,na.rm = T))
View(edad_x_gm)
group_meses = group_by(ambos_becal, Meses.de.duración.de.estudios)
View(group_meses)
ambos_becal$Meses.de.duración.de.estudios = as.numeric(ambos_becal$Meses.de.duración.de.estudios)
group_meses = group_by(ambos_becal, Meses.de.duración.de.estudios)
edad_x_gm = summarize(group_meses, edad_mean = mean(Edad,na.rm = T))
View(edad_x_gm)
edad_x_gm = summarize(group_meses, edad_mean = mean(Edad))
View(edad_x_gm)
plot(edad_x_gm$Meses.de.duración.de.estudios, edad_x_gm$edad_mean,
ylab="Edad", xlab="Duración Estudio en Meses",
main="Meses de Duración por Edad")
View(group_meses)
becal_sin_na = filter(ambos_becal, Edad != 'NA')  # elimino los valores ausentes
View(becal_sin_na)
cor(becal_sin_na$Meses.de.duración.de.estudios, becal_sin_na$Edad)
View(becal_sin_na)
becal_sin_na = filter(ambos_becal, Edad != 'NA' & Meses.de.duración.de.estudios != 'NA')  # elimino los valores ausentes
cor(becal_sin_na$Meses.de.duración.de.estudios, becal_sin_na$Edad)
cor(becal_sin_na$Edad, becal_sin_na$Meses.de.duración.de.estudios)
becal=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal2017.csv',
header = T,stringsAsFactors = F)
becal_c=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura.csv',
header = T,stringsAsFactors = F)
becal$Sexo = tolower(becal[,'Sexo'])
library(stringr)
becal[,'C.I.'] = str_trim(gsub(',', '', becal[,'C.I.']))
becal_c[,'C.I.'] = str_trim(gsub('\\.', '', becal_c[,'C.I.']))
ambos_becal = merge(becal, becal_c, by.x="C.I.", by.y="C.I.", all.y=TRUE)
library(dplyr)
head(select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia))
head(na.exclude(select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia)))
head(select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia))
select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia)
filter(select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia),
Ciudad.de.Residencia in c('Capital','Asunción','Asuncion'))
filter(select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia),
Ciudad.de.Residencia == 'Capital' ||
Ciudad.de.Residencia == 'Asunción' ||
Ciudad.de.Residencia == 'Asuncion')
setwd("~/MEGAsync/CDS/cursoml/practicas")
datos = read.csv(file = 'data/dengue_clima.csv', header = T, stringsAsFactors = F)
cm = cor(datos)
cm03 = subset(cm, cm[,"cantidad"] >= 0.3 | cm[,"cantidad"] <= -0.3)
View(cm03)
View(cm)
View(cm)
cm03 = subset(cm, (cm[,"cantidad"] >= 0.3 | cm[,"cantidad"] <= -0.3) & cm[,"cantidad"] <= 0.9)
cm03 = subset(cm, cm[,"cantidad"] >= 0.3 | cm[,"cantidad"] <= -0.3)
View(cm03)
View(datos)
