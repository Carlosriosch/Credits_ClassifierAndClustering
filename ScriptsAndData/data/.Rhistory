data$pais
data$Pais
data$Pais[1:3]
x=data.frame(var1=sample(1:3),var2=sample(6:8),var3=sample(11:13))
x
x[,1]
x[,1]
x[(x$var1 >= 2 | x$var1 <=12),1]
x[(x$var1 >= 2 | x$var1 <=12),]
x[(x$var1 >= 2 & x$var1 <12),]
x[(x$var1 >= 2 & x$var1 < 12),]
x[x$var1 >= 2 & x$var1 < 12,]
x[x$var1 >= 2 & x$var3 < 12,]
x[x$var1 >= 2 | x$var3 < 12,]
x
sort(x$var1, decreasing = T)
sort(x, decreasing = T)
sort(x[1:3], decreasing = T)
sort(x[,1:3], decreasing = T)
sort(x[,1], decreasing = T)
sort(x$var1, decreasing = T)
becal=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal2017.csv',
header = T,stringsAsFactors = F)
View(becal)
becal[1:5,becal$Sexo]
becal[1:5,'Sexo']
tolower(becal[,'Sexo'])[1:5]
tolower(becal[,'Sexo'])
tolower(becal[,'Sexo'])[1:5]
toupper(becal[,'Sexo'])[1:5]
toupper(becal[,'Sexo'])
tolower(becal[1:5,'Sexo'])
tolower(becal[,'Sexo'])[1:5]
toupper(becal[,'Sexo'])
becal[,'Sexo'] = toupper(becal[,'Sexo'])
becal$Sexo = tolower(becal[,'Sexo'])
## string functions
strsplit(becal[1:2,'Fecha.firma.de.Contrato'], '/')
becal=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal2017.csv',
header = T,stringsAsFactors = F)
## string functions
strsplit(becal[1:2,'Fecha.firma.de.Contrato'], '/')
fecha = strsplit(becal[1:2,'Fecha.firma.de.Contrato'], '/')
fecha[1]
fecha = strsplit(becal[1:2,'Fecha.firma.de.Contrato'], '/')
fecha[[1]
fecha = strsplit(becal[1:2,'Fecha.firma.de.Contrato'], '/')
fecha[[1]]
fecha[1]
fecha[1,1]
fecha[1]
fecha[1,]
fecha[[1,1]]
fecha[[1]]
fecha[[1,]]
fecha[[2]]
fecha[[1]]
fecha[[[1]]]
fecha[[1]]
gsub(',', '', becal[,'C.I.'])[1:2]
gsub(' ','',gsub(',', '', becal[,'C.I.']))[1:2]
fecha[[1]]
gsub(' ','',gsub(',', '', becal[,'C.I.']))[1:2]
becal_c=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura.csv',
header = T,stringsAsFactors = F)
View(becal_c)
grep('€',becal_c[c(1,210,843),'Total.General'])
grepl('€',becal_c[c(1,210,843),'Total.General'])
grep('€ ',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('€.',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('€o',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('.',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('€',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('[0-9]+',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grep('€.*[0-9]+',becal_c[c(1,210,843),'Total.General'])   #char buscado, data.frame, retorna filas con coincidencias
grepl('€',becal_c[c(1,210,843),'Total.General'])  #regex, vector, retorna booleanos por fila con coincidencia o no
grepl('€.*[0-9]+',becal_c[c(1,210,843),'Total.General'])  #regex, vector, retorna booleanos por fila con coincidencia o no
grep('^€.*[0-9]+',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('$€.*[0-9]+',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('€.*[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('^€.*[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('^€[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('^€.[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('^€.*[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grepl('€',becal_c[c(1,210,843),'Total.General'])  #regex, vector, retorna booleanos por fila con coincidencia o no
grep('^€.*[0-9]+$',becal_c[c(1,210,843),'Total.General'])   #regex, vector, retorna filas con coincidencias
grep('^€.*[0-9]+$',becal_c[,'Total.General'])   #regex, vector, retorna filas con coincidencias
str_trim(becal[1:2,'Condición'])
library(stringr)
install.packages("stringr")
library(stringr)
str_trim(becal[1:2,'Condición'])
str_trim(becal[1:2,'Condición'])
nchar(becal_c[1,'Universidad.de.Destino'])
nchar(becal[1:2,'Condición'])
str_trim(becal[1:2,'Condición'])
substr(becal_c[1,'Universidad.de.Destino'],16,20)
becal_c[1,c(5,6)]
becal_c[1,c(5,5)]
becal_c[1,c(5)]
becal_c[1,c(5,6)]
paste0(becal_c[1,5],' (',becal_c[1,6],')')
str_trim(becal[1:2,'Condición'])
substr(becal_c[1,'Universidad.de.Destino'],16,20)
nchar(becal_c[1,'Universidad.de.Destino'])
substr(becal_c[1,'Universidad.de.Destino'],16,20)
becal_c[1,c(5,6)]
paste0(becal_c[1,5],' (',becal_c[1,6],')')
gsub(',', '', becal[,'C.I.'])[1:2]
str_trim(gsub(',', '', becal[,'C.I.']))[1:2]
str_trim(gsub(',', '', becal[,'C.I.']))
## merge datasets
becal[,'C.I.'] = str_trim(gsub(',', '', becal[,'C.I.']))
str_trim(gsub(',', '', becal_c[,'C.I.']))
str_trim(gsub('.', '', becal_c[,'C.I.']))
str_trim(gsub('.', '', becal_c[,'C.I.']))
str_trim(gsub('\.', '', becal_c[,'C.I.']))
str_trim(gsub('\\.', '', becal_c[,'C.I.']))
becal_c[,'C.I.'] = str_trim(gsub('\\.', '', becal_c[,'C.I.']))
ambos_becal = merge(becal, becal_c, by.x="C.I.", by.y="C.I.", all.y=TRUE)
View(ambos_becal)
head(select(becal, C.I., Sexo, Edad))
install.packages("dplyr")
## dplyr: Split-Apply-Combine Paradigm
library(dplyr)
head(select(becal, C.I., Sexo, Edad))
head(select(ambos_becal, C.I., Sexo, Edad))
head(select(becal, C.I., Sexo, Edad))
dataset_filtrado = filter(becal, Sexo=='Femenino')
dataset_filtrado = filter(becal, Sexo=='Femenino')
gsub(' ', '', becal[,'Sexo'])
dataset_filtrado = filter(gsub(' ', '', becal[,'Sexo']), Sexo=='Femenino')
dataset_filtrado = filter(becal, Sexo=='Femenino')
str_trim(becal[,'Sexo'])
becal[,'Sexo'] = str_trim(becal[,'Sexo'])
dataset_filtrado = filter(becal, Sexo=='Femenino')
dataset_filtrado = filter(becal, Sexo='Femenino')
dataset_filtrado = filter(becal, Sexo=='Femenino')
becal[,'Sexo'] = str_trim(becal[,'Sexo'])
dataset_filtrado = filter(becal, Sexo=='Femenino')
dataset_filtrado = filter(becal, Sexo=='Femenino')
dataset_filtrado
head(dataset_filtrado)
head(select(dataset_filtrado, C.I., Sexo, Edad))
dataset_ordenado = arrange(becal, Edad)
head(select(dataset_ordenado, C.I., Sexo, Edad))
dataset_ordenado_desc = arrange(becal, desc(Edad))
head(select(dataset_ordenado_desc, C.I., Sexo, Edad))
dataset_ordenado = arrange(ambos_becal, Edad)
head(select(dataset_ordenado, C.I., Sexo, Edad))
dataset_ordenado_desc = arrange(ambos_becal, desc(Edad))
head(select(dataset_ordenado_desc, C.I., Sexo, Edad))
becal_renombrado = rename(becal, ci = C.I., sexo = Sexo, edad = Edad)
View(becal_renombrado)
select(becal, C.I., Sexo, Edad)
head(select(becal, C.I., Sexo, Edad))
filter(becal, Sexo=='Femenino')
head(select(dataset_filtrado, C.I., Sexo, Edad))
head(select(becal, C.I., Sexo, Edad))
head(select(dataset_filtrado, C.I., Sexo, Edad))
head(select(dataset_ordenado, C.I., Sexo, Edad))
head(select(dataset_ordenado_desc, C.I., Sexo, Edad))
View(dataset_filtrado)
dataset_filtrado = filter(ambos_becal, Sexo=='Femenino')
head(select(dataset_filtrado, C.I., Sexo, Edad))
View(dataset_filtrado)
mutate(becal_c, total_gs=5500*convertir_totalgeneral(Total.General))
head(select(becal_gs, Total.General, total_gs), 5)
substr(becal_c[,'Total.General'],2)
substr(becal_c[,'Total.General'],2,str_length(becal_c[,'Total.General']))
str_trim(substr(becal_c[,'Total.General'],2,str_length(becal_c[,'Total.General'])))
becal=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal2017.csv',
header = T,stringsAsFactors = F)
becal_c=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura.csv',
header = T,stringsAsFactors = F)
becal[,'C.I.'] = str_trim(gsub(',', '', becal[,'C.I.']))
becal_c[,'C.I.'] = str_trim(gsub('\\.', '', becal_c[,'C.I.']))
library(stringr)
becal[,'C.I.'] = str_trim(gsub(',', '', becal[,'C.I.']))
becal_c[,'C.I.'] = str_trim(gsub('\\.', '', becal_c[,'C.I.']))
ambos_becal = merge(becal, becal_c, by.x="C.I.", by.y="C.I.", all.y=TRUE)
hist(ambos_becal$edad, main=paste("Distribución de becarios por edad (n=",nrow(becal_m),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
View(ambos_becal)
View(ambos_becal)
hist(ambos_becal$Edad, main=paste("Distribución de becarios por edad (n=",nrow(becal_m),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(ambos_becal$as.numeric(Edad), main=paste("Distribución de becarios por edad (n=",nrow(becal_m),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(becal_m),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 80))
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 80))
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 50))
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 60))
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 50))
hist(as.numeric(ambos_becal$Edad), main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 60))
summary(as.numeric(ambos_becal$Edad))
boxplot(as.numeric(ambos_becal$Edad))
quantile(as.numeric(ambos_becal$Edad))
quantile(as.numeric(ambos_becal$Edad), na.rm = T)
quantile(as.numeric(ambos_becal$Edad), na.rm = T, probs = c(0.40,0.65,0.90))
ambos_becal$Edad = as.numeric(ambos_becal$Edad)
hist(ambos_becal$Edad, main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red")
hist(ambos_becal$Edad, main=paste("Distribución de becarios por edad (n=",nrow(ambos_becal),")"),
ylab="Frecuencia", xlab="Edad", col = "red", xlim = c(20, 60))
summary(ambos_becal$Edad)
quantile(ambos_becal$Edad, na.rm = T)
boxplot(as.numeric(ambos_becal$Edad))
boxplot(ambos_becal$Edad)
var(ambos_becal$Edad)
sd(ambos_becal$Edad)
var(ambos_becal$Edad, na.rm = T)
sd(ambos_becal$Edad, na.rm = T)
IQR(ambos_becal$Edad, na.rm = T)
mad(ambos_becal$Edad, na.rm = T) ## median absolute desviation
table(ambos_becal$Condición)
table(ambos_becal$Ciudad.de.Origen)
table(ambos_becal$Sexo)
table(ambos_becal$Condición)
barplot(table(ambos_becal$Condición),
main=paste("Becarios por condición (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de condición", col="blue")
barplot(table(ambos_becal$Ciudad.de.Origen),
main=paste("Becarios por condición (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de condición", col="blue")
barplot(table(ambos_becal$Sexo),
main=paste("Becarios por condición (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de condición", col="blue")
barplot(table(ambos_becal$Condición),
main=paste("Becarios por condición (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de condición", col="blue")
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por condición (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de condición", col="blue")
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue")
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue",las=2)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=1)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=2)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=3)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=3)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=4)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=3)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", xlab="Rango de Países", col="blue", las=2)
barplot(table(ambos_becal$País.de.Destino),
main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", col="blue", las=2)
table(ambos_becal$País.de.Destino) ## resumen para variables categóricas
subset(ambos_becal, País.de.Destino != "ESPAÑA")
table (subset(ambos_becal, País.de.Destino != "ESPAÑA")$País.de.Destino)
table(ambos_becal$País.de.Destino) ## resumen para variables categóricas
table(subset(ambos_becal, País.de.Destino != "")$País.de.Destino)
trim(ambos_becal$País.de.Destino)
str_trim(ambos_becal$País.de.Destino)
ambos_becal$País.de.Destino = str_trim(ambos_becal$País.de.Destino)
table(subset(ambos_becal, País.de.Destino != "")$País.de.Destino)
table(subset(ambos_becal, País.de.Destino != "")$País.de.Destino)
ambos_becal_limpio = table(subset(ambos_becal, País.de.Destino != "")$País.de.Destino)
pais_destino_categorias = table(droplevels(becal_limpio$País.de.Destino))
becal_limpio = table(subset(ambos_becal, País.de.Destino != "")$País.de.Destino)
pais_destino_categorias = table(droplevels(becal_limpio$País.de.Destino))
becal_limpio = subset(ambos_becal, País.de.Destino != "")
pais_destino_categorias = table(droplevels(becal_limpio$País.de.Destino))
View(becal_limpio)
droplevels(becal_limpio$País.de.Destino)
factor(becal_limpio$País.de.Destino)
pais_destino_categorias = table(droplevels(factor(becal_limpio$País.de.Destino)))
categoria_ordenadas = sort(pais_destino_categorias, decreasing = T)  # ordena las categorias de mayor a menor
barplot(categoria_ordenadas, main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", col="blue", las=2)
ambos_becal$País.de.Destino = factor(str_trim(ambos_becal$País.de.Destino))
becal_limpio = subset(ambos_becal, País.de.Destino != "")
pais_destino_categorias = table(droplevels(becal_limpio$País.de.Destino))
categoria_ordenadas = sort(pais_destino_categorias, decreasing = T)  # ordena las categorias de mayor a menor
barplot(categoria_ordenadas, main=paste("Becarios por País de Destino (n=",nrow(ambos_becal),")"),
ylab="Total", col="blue", las=2)
plot(ambos_becal$Meses.de.duración.de.estudios, ambos_becal$Edad,
ylab="Edad", xlab="Duración Estudio en Meses",
main="Meses de Duración por Edad")
plot(ambos_becal$Meses.de.duración.de.estudios, ambos_becal$Edad,
ylab="Edad", xlab="Duración Estudio en Meses",
main="Meses de Duración por Edad", na.rm=T)
plot(ambos_becal$Meses.de.duración.de.estudios, ambos_becal$Edad,
ylab="Edad", xlab="Duración Estudio en Meses",
main="Meses de Duración por Edad")
groupo_meses = group_by(ambos_becal, Meses.de.duración.de.estudios)
library(dplyr)
groupo_meses = group_by(ambos_becal, Meses.de.duración.de.estudios)
View(groupo_meses)
edad_x_gm = summarize(groupo_meses, edad_mean = mean(ambos_becal$Edad))
View(edad_x_gm)
mean(ambos_becal$Edad)
mean(ambos_becal$Edad,na.rm = T)
edad_x_gm = summarize(groupo_meses, edad_mean = mean(ambos_becal$Edad,na.rm = T))
View(edad_x_gm)
group_meses = group_by(ambos_becal, Meses.de.duración.de.estudios)
View(group_meses)
ambos_becal$Meses.de.duración.de.estudios = as.numeric(ambos_becal$Meses.de.duración.de.estudios)
group_meses = group_by(ambos_becal, Meses.de.duración.de.estudios)
edad_x_gm = summarize(group_meses, edad_mean = mean(Edad,na.rm = T))
View(edad_x_gm)
edad_x_gm = summarize(group_meses, edad_mean = mean(Edad))
View(edad_x_gm)
plot(edad_x_gm$Meses.de.duración.de.estudios, edad_x_gm$edad_mean,
ylab="Edad", xlab="Duración Estudio en Meses",
main="Meses de Duración por Edad")
View(group_meses)
becal_sin_na = filter(ambos_becal, Edad != 'NA')  # elimino los valores ausentes
View(becal_sin_na)
cor(becal_sin_na$Meses.de.duración.de.estudios, becal_sin_na$Edad)
View(becal_sin_na)
becal_sin_na = filter(ambos_becal, Edad != 'NA' & Meses.de.duración.de.estudios != 'NA')  # elimino los valores ausentes
cor(becal_sin_na$Meses.de.duración.de.estudios, becal_sin_na$Edad)
cor(becal_sin_na$Edad, becal_sin_na$Meses.de.duración.de.estudios)
becal=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal2017.csv',
header = T,stringsAsFactors = F)
becal_c=read.csv(file = '/home/julio/MEGAsync/Documentos/Data Science/datascience-course/proyecto/data/becal-cobertura.csv',
header = T,stringsAsFactors = F)
becal$Sexo = tolower(becal[,'Sexo'])
library(stringr)
becal[,'C.I.'] = str_trim(gsub(',', '', becal[,'C.I.']))
becal_c[,'C.I.'] = str_trim(gsub('\\.', '', becal_c[,'C.I.']))
ambos_becal = merge(becal, becal_c, by.x="C.I.", by.y="C.I.", all.y=TRUE)
library(dplyr)
head(select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia))
head(na.exclude(select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia)))
head(select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia))
select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia)
filter(select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia),
Ciudad.de.Residencia in c('Capital','Asunción','Asuncion'))
filter(select(ambos_becal, Meses.de.duración.de.estudios, Ciudad.de.Residencia),
Ciudad.de.Residencia == 'Capital' ||
Ciudad.de.Residencia == 'Asunción' ||
Ciudad.de.Residencia == 'Asuncion')
setwd("/home/julio/MEGAsync/CDS/cursoml/practicas/data")
library(stringr)
library(ggplot2)
library(dplyr)
library(stringr)
data = read.csv(file = 'dataset_contratos_nuevo.csv', sep=";", dec=",", header = T, stringsAsFactors = F)
data$fecha_apertura = as.Date(data$fecha_apertura, format = "%Y-%m-%d")
data$fecha_firma_contrato = as.Date(data$fecha_firma_contrato, format = "%Y-%m-%d")
data$fecha_publicacion_lla = as.Date(data$fecha_publicacion_lla, format = "%Y-%m-%d")
data = mutate(data, plurianual=as.factor(grepl('plurianual',data$marcas)))
data = mutate(data, contrato_abierto=as.factor(grepl('contrato_abierto',data$marcas)))
data = mutate(data, licitacion_sin_difusion=as.factor(grepl('licitacion_sin_difusion',data$marcas)))
data = mutate(data, urgencia_impostergable=as.factor(grepl('urgencia_impostergable',data$marcas)))
data = mutate(data, seguridad_nacional=as.factor(grepl('seguridad_nacional',data$marcas)))
data = mutate(data, fonacide=as.factor(grepl('fonacide',(data$marcas))))
data = mutate(data, abastecimiento_simultaneo=as.factor(grepl('abastecimiento_simultaneo',data$marcas)))
data = mutate(data, adreferendum=as.factor(grepl('adreferendum',data$marcas)))
data = mutate(data, precalificacion=as.factor(grepl('precalificacion',data$marcas)))
data = mutate(data, mesnro_fecha_publicacion_lla=as.numeric(format(data$fecha_publicacion_lla, "%m")))
data = mutate(data, mesnro_fecha_firma_contrato=as.numeric(format(data$fecha_firma_contrato, "%m")))
data = mutate(data, diasPublicacionApertura=data$fecha_apertura - data$fecha_publicacion_lla)
data = mutate(data, diasPublicacionContrato=data$fecha_firma_contrato - data$fecha_publicacion_lla)
data = mutate(data, monto_adjudicado_gs=data$monto_adjudicado)
data[which(data$X_moneda=="USD"),"monto_adjudicado_gs"] = data[which(data$X_moneda=="USD"),"monto_adjudicado_gs"]*6010
filteredData = data[,c("convocante",
"categoria",
"tipo_procedimiento",
"con_proceso",
"subasta",
"plurianual",
"contrato_abierto",
"fonacide",
"abastecimiento_simultaneo",
"adreferendum",
"licitacion_sin_difusion",
"urgencia_impostergable",
"seguridad_nacional",
"precalificacion",
"mesnro_fecha_publicacion_lla",
"mesnro_fecha_firma_contrato",
"diasPublicacionApertura",
"diasPublicacionContrato",
"monto_adjudicado_gs")]
filteredData$convocante = as.factor(filteredData$convocante)
filteredData$categoria = as.factor(filteredData$categoria)
filteredData$tipo_procedimiento = as.factor(filteredData$tipo_procedimiento)
filteredData$con_proceso = as.numeric(as.logical(filteredData$con_proceso))
filteredData$subasta = as.numeric(as.logical(filteredData$subasta))
filteredData$plurianual = as.numeric(as.logical(filteredData$plurianual))
filteredData$contrato_abierto = as.numeric(as.logical(filteredData$contrato_abierto))
filteredData$fonacide = as.numeric(as.logical(filteredData$fonacide))
filteredData$abastecimiento_simultaneo = as.numeric(as.logical(filteredData$abastecimiento_simultaneo))
filteredData$adreferendum = as.numeric(as.logical(filteredData$adreferendum))
filteredData$licitacion_sin_difusion = as.numeric(as.logical(filteredData$licitacion_sin_difusion))
filteredData$urgencia_impostergable = as.numeric(as.logical(filteredData$urgencia_impostergable))
filteredData$seguridad_nacional = as.numeric(as.logical(filteredData$seguridad_nacional))
filteredData$precalificacion = as.numeric(as.logical(filteredData$precalificacion))
filteredData$mesnro_fecha_publicacion_lla = as.numeric(filteredData$mesnro_fecha_publicacion_lla)
filteredData$mesnro_fecha_firma_contrato = as.numeric(filteredData$mesnro_fecha_firma_contrato)
filteredData$diasPublicacionApertura = as.numeric(filteredData$diasPublicacionApertura)
filteredData$diasPublicacionContrato = as.numeric(filteredData$diasPublicacionContrato)
filteredData$monto_adjudicado_gs = as.numeric(filteredData$monto_adjudicado_gs)
filteredData = subset(filteredData, !(is.na(filteredData$mesnro_fecha_firma_contrato)))
matrizCorrelacion = cor(filteredData[4:19])
matrizCorrelacion[,"monto_adjudicado_gs"]
correlacionImportante = subset(matrizCorrelacion, matrizCorrelacion[,"monto_adjudicado_gs"] >= 0.1 & matrizCorrelacion[,"monto_adjudicado_gs"] < 1)
View(matrizCorrelacion)
View(correlacionImportante)
filteredData = filteredData[,c("convocante",
"categoria",
"tipo_procedimiento",
"adreferendum",
"diasPublicacionApertura",
"diasPublicacionContrato",
"monto_adjudicado_gs")]
write.csv(filteredData,'resultado_examen_R_20190225.csv',row.names = F, na = "")
setwd("/home/julio/MEGAsync/CDS/cursoml/practicas/data")
contratos = read.csv(file = 'dataset_contratos_nuevo.csv', header = T, stringsAsFactors = F, sep = ";", encoding = 'UTF-8')
contratos$convocante = as.factor(contratos$convocante)
contratos$categoria = as.factor(contratos$categoria)
contratos$tipo_procedimiento = as.factor(contratos$tipo_procedimiento)
contratos$subasta = as.logical(contratos$subasta)
contratos$con_proceso = as.logical(contratos$con_proceso)
contratos = mutate(contratos, plurianual=(grepl('plurianual',contratos$marcas)))
contratos = mutate(contratos, contrato_abierto=(grepl('contrato_abierto',contratos$marcas)))
contratos = mutate(contratos, fonacide=(grepl('fonacide',contratos$marcas)))
contratos = mutate(contratos, abastecimiento_simultaneo=(grepl('abastecimiento_simultaneo',contratos$marcas)))
contratos = mutate(contratos, adreferendum=(grepl('adreferendum',contratos$marcas)))
contratos = mutate(contratos, licitacion_sin_difusion=(grepl('licitacion_sin_difusion',contratos$marcas)))
contratos = mutate(contratos, urgencia_impostergable=(grepl('urgencia_impostergable',contratos$marcas)))
contratos = mutate(contratos, seguridad_nacional=(grepl('seguridad_nacional',contratos$marcas)))
contratos = mutate(contratos, precalificacion=(grepl('precalificacion',contratos$marcas)))
contratos$con_proceso = as.numeric(contratos$con_proceso)
contratos$subasta = as.numeric(contratos$subasta)
contratos$plurianual = as.numeric(contratos$plurianual)
contratos$contrato_abierto = as.numeric(contratos$contrato_abierto)
contratos$fonacide = as.numeric(contratos$fonacide)
contratos$abastecimiento_simultaneo = as.numeric(contratos$abastecimiento_simultaneo)
contratos$adreferendum = as.numeric(contratos$adreferendum)
contratos$licitacion_sin_difusion = as.numeric(contratos$licitacion_sin_difusion)
contratos$urgencia_impostergable = as.numeric(contratos$urgencia_impostergable)
contratos$seguridad_nacional = as.numeric(contratos$seguridad_nacional)
contratos$precalificacion = as.numeric(contratos$precalificacion)
contratos$fecha_publicacion_lla = as.Date(contratos$fecha_publicacion_lla)
contratos$fecha_firma_contrato = as.Date(contratos$fecha_firma_contrato)
contratos$fecha_apertura = as.Date(contratos$fecha_apertura)
contratos = mutate(contratos, mesnro_fecha_firma_contrato=as.numeric(format(contratos$fecha_firma_contrato, "%m")))
contratos = mutate(contratos, mesnro_fecha_publicacion_lla=as.numeric(format(contratos$fecha_publicacion_lla, "%m")))
contratos = mutate(contratos, monto_adjudicado_gs=contratos$monto_adjudicado)
contratos[which(contratos$X_moneda=="USD"), "monto_adjudicado_gs"] = contratos[which(contratos$X_moneda=="USD"), "monto_adjudicado_gs"] * 6000
contratos = mutate(contratos, diasPublicacionContrato=contratos$fecha_firma_contrato - contratos$fecha_publicacion_lla)
contratos = mutate(contratos, diasPublicacionApertura=contratos$fecha_apertura - contratos$fecha_publicacion_lla)
contratos$diasPublicacionContrato = as.numeric(contratos$diasPublicacionContrato)
contratos$diasPublicacionApertura = as.numeric(contratos$diasPublicacionApertura)
contratosFiltrados = contratos[,c(
"convocante",
"categoria",
"tipo_procedimiento",
"subasta",
"con_proceso",
"plurianual",
"contrato_abierto",
"fonacide",
"abastecimiento_simultaneo",
"adreferendum",
"licitacion_sin_difusion",
"urgencia_impostergable",
"seguridad_nacional",
"precalificacion",
"mesnro_fecha_publicacion_lla",
"mesnro_fecha_firma_contrato",
"diasPublicacionApertura",
"diasPublicacionContrato",
"monto_adjudicado_gs")]
str(contratosFiltrados)
contratosFiltrados = contratosFiltrados[(!is.na(contratosFiltrados$mesnro_fecha_firma_contrato)), ]
correlacionmatriz = cor(contratosFiltrados[4:19])
cm01 = subset(correlacionmatriz, correlacionmatriz[,"monto_adjudicado_gs"] >= 0.1 & correlacionmatriz[,"monto_adjudicado_gs"] < 1)
View(cm01)
nuevoframe = contratosFiltrados[,c(
"convocante",
"categoria",
"tipo_procedimiento",
"adreferendum",
"diasPublicacionApertura",
"diasPublicacionContrato",
"monto_adjudicado_gs"
)]
write.csv(nuevoframe,'dataset_contratos_nuevo_procesado1.csv',row.names = F, na = "")
